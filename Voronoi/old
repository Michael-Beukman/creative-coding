const cDiv = document.getElementById("canvasDiv");
class Line{
  constructor(x, y, ex,  ey){
    this.x = x;
    this.y = y;
    this.ex = ex;
    this.ey = ey;
  }
}
let cols = [];
let boundaries = [];
let points = [];
let radii = []
let lines = [];
let speeds = [1, 1, 1];
let polygonLines = [];

function setup() {
  let canvas = createCanvas(windowWidth, windowHeight);
  canvas.parent(cDiv);
  points.push(createVector(-400, -400));
  points.push(createVector(0, -500));
  points.push(createVector(0, 0));
  radii.push(0, 0, 0);
  cols.push(color(255,0,0, 100), color(0,255,0, 100), color(0,0,255, 100))
  polygonLines = [
    new Line(-500, -600, 500, -600),
    new Line(500, -600, 500, 600),
    new Line(500, 600, 450, 600), 
    new Line(450, 600, 450, 500),
    new Line(450, 500, -500, 500),
    new Line(-500, 500, -500, -600)
  ];
  for (let i=0; i<points.length; ++i){
    let temp = [];
    for (let j=0; j<points.length; ++j){
      temp.push(null);
    }
    boundaries.push(temp);
  }
}

function findIntersectionPoints(c1, c2, r1, r2){
  const a = c1.x, b=c1.y, c=c2.x, d=c2.y;
  const A = c - a, B = d-b;
  const C = r2*r2 - A*A - B*B;
  const D = -C/(2*A) + r1*r1/(2*A);
  const gamma = B/A;
  const alpha = gamma*gamma + 1;
  const beta = -2 * D * gamma;
  const delta = D*D - r1*r1;
  // console.log(a, b, c, d);
  // console.log(A, B);
  // console.log(C, D, gamma);
  // console.log(alpha, beta, delta);  
  //then y = (-beta +- sqrt(beta * beta - 4 * alpha * delta) ) / (2*alpha);
  const disc = sqrt(beta * beta - 4 * alpha * delta);
  let y1, y2, x1, x2;
  // todo if B==0
  if (A == 0){
      y1 = -1/(2*B) * (r2*r2 - r1*r1 - B*B);
      y2 = y1;
      const t = r1*r1 - y1*y1;
      x1 = sqrt(t);
      x2 = -x1;
  }else{
  y1 = (-beta + disc)/(2*alpha);
  y2 = (-beta - disc)/(2*alpha);
  x1 = D - gamma * y1;
  x2 = D - gamma * y2;
  }
  // console.log(y1, y2, x1, x2);
  stroke(0,255,0);
  strokeWeight(2);
  // push();
  // translate(a, b);
  // now to find xs
  // const x1 = D - gamma * y1;
  // const x2 = D - gamma * y2;
  lines.push([x1 + a, x2 + a, y1+ b, y2+ b]);

}



function draw() {
  translate(width/2, height/2);
    background(0);
    stroke(255, 0, 0);
    fill(255)
    for (let i=0; i<points.length; ++i){
      const p = points[i];
      fill(255, 255, 255, 100)
      ellipse(p.x, p.y, radii[i]*2);
      fill(0);
      ellipse(p.x, p.y, 10);
    }
    for (let i=0; i< points.length; ++i){
      for (let j=i+1; j<points.length; ++j){
        // console.log(p5.Vector.sub(points[i], points[j]).mag(), radii[i] + radii[j])
        if ( p5.Vector.sub(points[i], points[j]).mag() < radii[i] + radii[j] ){
          // colliding.
          findIntersectionPoints(points[i], points[j], radii[i], radii[j]);
          const lastLine = lines[lines.length-1];
          boundaries[i][j] = lastLine;
          boundaries[j][i] = lastLine;
        }
      }
    }
    for (let i=0; i<radii.length; ++i) radii[i]+= speeds[i];
    for (let l of lines){
      stroke(0,255,0,100);
      // line(l[0], l[2], l[1], l[3]);
    }
    
    for (let i =0; i<boundaries.length; ++i){
     for (let j =i+1; j<boundaries.length; ++j){ 
      
    }
    }
 
    for (let i =0; i<boundaries.length; ++i){
      const boundary = boundaries[i];
      for (let l of boundary){
        if (l == null)continue;
        stroke(cols[i]);
        line(l[0], l[2], l[1], l[3]);
      }
    }
    for (let l of polygonLines){
      stroke(255);
      line(l.x, l.y, l.ex, l.ey);
    }
}
